/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MetadataIndexService.h"

namespace indexfs {


MetadataIndexService_Ping_args::~MetadataIndexService_Ping_args() throw() {
}


uint32_t MetadataIndexService_Ping_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Ping_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Ping_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Ping_pargs::~MetadataIndexService_Ping_pargs() throw() {
}


uint32_t MetadataIndexService_Ping_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Ping_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Ping_result::~MetadataIndexService_Ping_result() throw() {
}


uint32_t MetadataIndexService_Ping_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Ping_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Ping_result");

  if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Ping_presult::~MetadataIndexService_Ping_presult() throw() {
}


uint32_t MetadataIndexService_Ping_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_FlushDB_args::~MetadataIndexService_FlushDB_args() throw() {
}


uint32_t MetadataIndexService_FlushDB_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_FlushDB_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_FlushDB_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_FlushDB_pargs::~MetadataIndexService_FlushDB_pargs() throw() {
}


uint32_t MetadataIndexService_FlushDB_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_FlushDB_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_FlushDB_result::~MetadataIndexService_FlushDB_result() throw() {
}


uint32_t MetadataIndexService_FlushDB_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_FlushDB_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_FlushDB_result");

  if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_FlushDB_presult::~MetadataIndexService_FlushDB_presult() throw() {
}


uint32_t MetadataIndexService_FlushDB_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Access_args::~MetadataIndexService_Access_args() throw() {
}


uint32_t MetadataIndexService_Access_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Access_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Access_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Access_pargs::~MetadataIndexService_Access_pargs() throw() {
}


uint32_t MetadataIndexService_Access_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Access_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Access_result::~MetadataIndexService_Access_result() throw() {
}


uint32_t MetadataIndexService_Access_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_a_dir.read(iprot);
          this->__isset.not_a_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Access_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Access_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_found) {
    xfer += oprot->writeFieldBegin("not_found", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->not_found.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_a_dir) {
    xfer += oprot->writeFieldBegin("not_a_dir", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->not_a_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Access_presult::~MetadataIndexService_Access_presult() throw() {
}


uint32_t MetadataIndexService_Access_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_a_dir.read(iprot);
          this->__isset.not_a_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Renew_args::~MetadataIndexService_Renew_args() throw() {
}


uint32_t MetadataIndexService_Renew_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Renew_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Renew_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Renew_pargs::~MetadataIndexService_Renew_pargs() throw() {
}


uint32_t MetadataIndexService_Renew_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Renew_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Renew_result::~MetadataIndexService_Renew_result() throw() {
}


uint32_t MetadataIndexService_Renew_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_a_dir.read(iprot);
          this->__isset.not_a_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Renew_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Renew_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_found) {
    xfer += oprot->writeFieldBegin("not_found", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->not_found.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_a_dir) {
    xfer += oprot->writeFieldBegin("not_a_dir", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->not_a_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Renew_presult::~MetadataIndexService_Renew_presult() throw() {
}


uint32_t MetadataIndexService_Renew_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_a_dir.read(iprot);
          this->__isset.not_a_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Getattr_args::~MetadataIndexService_Getattr_args() throw() {
}


uint32_t MetadataIndexService_Getattr_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Getattr_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Getattr_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Getattr_pargs::~MetadataIndexService_Getattr_pargs() throw() {
}


uint32_t MetadataIndexService_Getattr_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Getattr_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Getattr_result::~MetadataIndexService_Getattr_result() throw() {
}


uint32_t MetadataIndexService_Getattr_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Getattr_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Getattr_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_found) {
    xfer += oprot->writeFieldBegin("not_found", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->not_found.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Getattr_presult::~MetadataIndexService_Getattr_presult() throw() {
}


uint32_t MetadataIndexService_Getattr_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Mknod_args::~MetadataIndexService_Mknod_args() throw() {
}


uint32_t MetadataIndexService_Mknod_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perm);
          this->__isset.perm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mknod_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->perm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_pargs::~MetadataIndexService_Mknod_pargs() throw() {
}


uint32_t MetadataIndexService_Mknod_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->perm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_result::~MetadataIndexService_Mknod_result() throw() {
}


uint32_t MetadataIndexService_Mknod_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mknod_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_result");

  if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_presult::~MetadataIndexService_Mknod_presult() throw() {
}


uint32_t MetadataIndexService_Mknod_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Mknod_Bulk_args::~MetadataIndexService_Mknod_Bulk_args() throw() {
}


uint32_t MetadataIndexService_Mknod_Bulk_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_ids.read(iprot);
          this->__isset.obj_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perm);
          this->__isset.perm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mknod_Bulk_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_Bulk_args");

  xfer += oprot->writeFieldBegin("obj_ids", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_ids.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->perm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_Bulk_pargs::~MetadataIndexService_Mknod_Bulk_pargs() throw() {
}


uint32_t MetadataIndexService_Mknod_Bulk_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_Bulk_pargs");

  xfer += oprot->writeFieldBegin("obj_ids", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_ids)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->perm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_Bulk_result::~MetadataIndexService_Mknod_Bulk_result() throw() {
}


uint32_t MetadataIndexService_Mknod_Bulk_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mknod_Bulk_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Mknod_Bulk_result");

  if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mknod_Bulk_presult::~MetadataIndexService_Mknod_Bulk_presult() throw() {
}


uint32_t MetadataIndexService_Mknod_Bulk_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Mkdir_args::~MetadataIndexService_Mkdir_args() throw() {
}


uint32_t MetadataIndexService_Mkdir_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perm);
          this->__isset.perm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hint_server1);
          this->__isset.hint_server1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hint_server2);
          this->__isset.hint_server2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mkdir_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->perm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server1", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->hint_server1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->hint_server2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_pargs::~MetadataIndexService_Mkdir_pargs() throw() {
}


uint32_t MetadataIndexService_Mkdir_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->perm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server1", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->hint_server1)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->hint_server2)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_result::~MetadataIndexService_Mkdir_result() throw() {
}


uint32_t MetadataIndexService_Mkdir_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mkdir_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_result");

  if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_presult::~MetadataIndexService_Mkdir_presult() throw() {
}


uint32_t MetadataIndexService_Mkdir_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Mkdir_Presplit_args::~MetadataIndexService_Mkdir_Presplit_args() throw() {
}


uint32_t MetadataIndexService_Mkdir_Presplit_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perm);
          this->__isset.perm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hint_server1);
          this->__isset.hint_server1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hint_server2);
          this->__isset.hint_server2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mkdir_Presplit_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_Presplit_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->perm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server1", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->hint_server1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->hint_server2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_Presplit_pargs::~MetadataIndexService_Mkdir_Presplit_pargs() throw() {
}


uint32_t MetadataIndexService_Mkdir_Presplit_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_Presplit_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->perm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server1", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->hint_server1)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint_server2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->hint_server2)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_Presplit_result::~MetadataIndexService_Mkdir_Presplit_result() throw() {
}


uint32_t MetadataIndexService_Mkdir_Presplit_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Mkdir_Presplit_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Mkdir_Presplit_result");

  if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Mkdir_Presplit_presult::~MetadataIndexService_Mkdir_Presplit_presult() throw() {
}


uint32_t MetadataIndexService_Mkdir_Presplit_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Chmod_args::~MetadataIndexService_Chmod_args() throw() {
}


uint32_t MetadataIndexService_Chmod_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perm);
          this->__isset.perm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Chmod_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Chmod_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->perm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chmod_pargs::~MetadataIndexService_Chmod_pargs() throw() {
}


uint32_t MetadataIndexService_Chmod_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Chmod_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("perm", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->perm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chmod_result::~MetadataIndexService_Chmod_result() throw() {
}


uint32_t MetadataIndexService_Chmod_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Chmod_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Chmod_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_found) {
    xfer += oprot->writeFieldBegin("not_found", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->not_found.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chmod_presult::~MetadataIndexService_Chmod_presult() throw() {
}


uint32_t MetadataIndexService_Chmod_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Chown_args::~MetadataIndexService_Chown_args() throw() {
}


uint32_t MetadataIndexService_Chown_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj_id.read(iprot);
          this->__isset.obj_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->gid);
          this->__isset.gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Chown_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Chown_args");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gid", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chown_pargs::~MetadataIndexService_Chown_pargs() throw() {
}


uint32_t MetadataIndexService_Chown_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Chown_pargs");

  xfer += oprot->writeFieldBegin("obj_id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->obj_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->uid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gid", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->gid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chown_result::~MetadataIndexService_Chown_result() throw() {
}


uint32_t MetadataIndexService_Chown_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Chown_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Chown_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_redirect) {
    xfer += oprot->writeFieldBegin("srv_redirect", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->srv_redirect.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.not_found) {
    xfer += oprot->writeFieldBegin("not_found", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->not_found.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Chown_presult::~MetadataIndexService_Chown_presult() throw() {
}


uint32_t MetadataIndexService_Chown_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_redirect.read(iprot);
          this->__isset.srv_redirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->not_found.read(iprot);
          this->__isset.not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_CreateZeroth_args::~MetadataIndexService_CreateZeroth_args() throw() {
}


uint32_t MetadataIndexService_CreateZeroth_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zeroth_server);
          this->__isset.zeroth_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_CreateZeroth_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_CreateZeroth_args");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zeroth_server", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->zeroth_server);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_CreateZeroth_pargs::~MetadataIndexService_CreateZeroth_pargs() throw() {
}


uint32_t MetadataIndexService_CreateZeroth_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_CreateZeroth_pargs");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->dir_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zeroth_server", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->zeroth_server)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_CreateZeroth_result::~MetadataIndexService_CreateZeroth_result() throw() {
}


uint32_t MetadataIndexService_CreateZeroth_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrong_srv.read(iprot);
          this->__isset.wrong_srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_CreateZeroth_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_CreateZeroth_result");

  if (this->__isset.wrong_srv) {
    xfer += oprot->writeFieldBegin("wrong_srv", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->wrong_srv.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_CreateZeroth_presult::~MetadataIndexService_CreateZeroth_presult() throw() {
}


uint32_t MetadataIndexService_CreateZeroth_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrong_srv.read(iprot);
          this->__isset.wrong_srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_Readdir_args::~MetadataIndexService_Readdir_args() throw() {
}


uint32_t MetadataIndexService_Readdir_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Readdir_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Readdir_args");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Readdir_pargs::~MetadataIndexService_Readdir_pargs() throw() {
}


uint32_t MetadataIndexService_Readdir_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_Readdir_pargs");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->dir_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Readdir_result::~MetadataIndexService_Readdir_result() throw() {
}


uint32_t MetadataIndexService_Readdir_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_Readdir_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_Readdir_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_Readdir_presult::~MetadataIndexService_Readdir_presult() throw() {
}


uint32_t MetadataIndexService_Readdir_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_ReadBitmap_args::~MetadataIndexService_ReadBitmap_args() throw() {
}


uint32_t MetadataIndexService_ReadBitmap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_ReadBitmap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_ReadBitmap_args");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_ReadBitmap_pargs::~MetadataIndexService_ReadBitmap_pargs() throw() {
}


uint32_t MetadataIndexService_ReadBitmap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_ReadBitmap_pargs");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->dir_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_ReadBitmap_result::~MetadataIndexService_ReadBitmap_result() throw() {
}


uint32_t MetadataIndexService_ReadBitmap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_ReadBitmap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_ReadBitmap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_ReadBitmap_presult::~MetadataIndexService_ReadBitmap_presult() throw() {
}


uint32_t MetadataIndexService_ReadBitmap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_UpdateBitmap_args::~MetadataIndexService_UpdateBitmap_args() throw() {
}


uint32_t MetadataIndexService_UpdateBitmap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dmap_data);
          this->__isset.dmap_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_UpdateBitmap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_UpdateBitmap_args");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dmap_data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dmap_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_UpdateBitmap_pargs::~MetadataIndexService_UpdateBitmap_pargs() throw() {
}


uint32_t MetadataIndexService_UpdateBitmap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_UpdateBitmap_pargs");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->dir_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dmap_data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->dmap_data)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_UpdateBitmap_result::~MetadataIndexService_UpdateBitmap_result() throw() {
}


uint32_t MetadataIndexService_UpdateBitmap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_UpdateBitmap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_UpdateBitmap_result");

  if (this->__isset.unknown_dir) {
    xfer += oprot->writeFieldBegin("unknown_dir", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->unknown_dir.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_UpdateBitmap_presult::~MetadataIndexService_UpdateBitmap_presult() throw() {
}


uint32_t MetadataIndexService_UpdateBitmap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unknown_dir.read(iprot);
          this->__isset.unknown_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


MetadataIndexService_InsertSplit_args::~MetadataIndexService_InsertSplit_args() throw() {
}


uint32_t MetadataIndexService_InsertSplit_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->parent_index);
          this->__isset.parent_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->child_index);
          this->__isset.child_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path_split_files);
          this->__isset.path_split_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dmap_data);
          this->__isset.dmap_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_seq);
          this->__isset.min_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_seq);
          this->__isset.max_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_entries);
          this->__isset.num_entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_InsertSplit_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_InsertSplit_args");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_index", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->parent_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child_index", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->child_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path_split_files", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->path_split_files);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dmap_data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->dmap_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_seq", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->min_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_seq", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->max_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_entries", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->num_entries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_InsertSplit_pargs::~MetadataIndexService_InsertSplit_pargs() throw() {
}


uint32_t MetadataIndexService_InsertSplit_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataIndexService_InsertSplit_pargs");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->dir_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_index", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16((*(this->parent_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child_index", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->child_index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path_split_files", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->path_split_files)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dmap_data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->dmap_data)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_seq", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->min_seq)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_seq", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64((*(this->max_seq)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_entries", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64((*(this->num_entries)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_InsertSplit_result::~MetadataIndexService_InsertSplit_result() throw() {
}


uint32_t MetadataIndexService_InsertSplit_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrong_srv.read(iprot);
          this->__isset.wrong_srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataIndexService_InsertSplit_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MetadataIndexService_InsertSplit_result");

  if (this->__isset.wrong_srv) {
    xfer += oprot->writeFieldBegin("wrong_srv", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->wrong_srv.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.file_exists) {
    xfer += oprot->writeFieldBegin("file_exists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->file_exists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.io_error) {
    xfer += oprot->writeFieldBegin("io_error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->io_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.srv_error) {
    xfer += oprot->writeFieldBegin("srv_error", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->srv_error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MetadataIndexService_InsertSplit_presult::~MetadataIndexService_InsertSplit_presult() throw() {
}


uint32_t MetadataIndexService_InsertSplit_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrong_srv.read(iprot);
          this->__isset.wrong_srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file_exists.read(iprot);
          this->__isset.file_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->io_error.read(iprot);
          this->__isset.io_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv_error.read(iprot);
          this->__isset.srv_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void MetadataIndexServiceClient::Ping()
{
  send_Ping();
  recv_Ping();
}

void MetadataIndexServiceClient::send_Ping()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Ping", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Ping()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Ping") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Ping_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::FlushDB()
{
  send_FlushDB();
  recv_FlushDB();
}

void MetadataIndexServiceClient::send_FlushDB()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("FlushDB", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_FlushDB_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_FlushDB()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("FlushDB") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_FlushDB_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::Access(LookupInfo& _return, const OID& obj_id)
{
  send_Access(obj_id);
  recv_Access(_return);
}

void MetadataIndexServiceClient::send_Access(const OID& obj_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Access", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Access_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Access(LookupInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Access") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Access_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.not_found) {
    throw result.not_found;
  }
  if (result.__isset.not_a_dir) {
    throw result.not_a_dir;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Access failed: unknown result");
}

void MetadataIndexServiceClient::Renew(LookupInfo& _return, const OID& obj_id)
{
  send_Renew(obj_id);
  recv_Renew(_return);
}

void MetadataIndexServiceClient::send_Renew(const OID& obj_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Renew", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Renew_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Renew(LookupInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Renew") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Renew_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.not_found) {
    throw result.not_found;
  }
  if (result.__isset.not_a_dir) {
    throw result.not_a_dir;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Renew failed: unknown result");
}

void MetadataIndexServiceClient::Getattr(StatInfo& _return, const OID& obj_id)
{
  send_Getattr(obj_id);
  recv_Getattr(_return);
}

void MetadataIndexServiceClient::send_Getattr(const OID& obj_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Getattr", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Getattr_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Getattr(StatInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Getattr") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Getattr_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.not_found) {
    throw result.not_found;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Getattr failed: unknown result");
}

void MetadataIndexServiceClient::Mknod(const OID& obj_id, const int16_t perm)
{
  send_Mknod(obj_id, perm);
  recv_Mknod();
}

void MetadataIndexServiceClient::send_Mknod(const OID& obj_id, const int16_t perm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Mknod", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mknod_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Mknod()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Mknod") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Mknod_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::Mknod_Bulk(const OIDS& obj_ids, const int16_t perm)
{
  send_Mknod_Bulk(obj_ids, perm);
  recv_Mknod_Bulk();
}

void MetadataIndexServiceClient::send_Mknod_Bulk(const OIDS& obj_ids, const int16_t perm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Mknod_Bulk", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mknod_Bulk_pargs args;
  args.obj_ids = &obj_ids;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Mknod_Bulk()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Mknod_Bulk") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Mknod_Bulk_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::Mkdir(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  send_Mkdir(obj_id, perm, hint_server1, hint_server2);
  recv_Mkdir();
}

void MetadataIndexServiceClient::send_Mkdir(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Mkdir", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mkdir_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.hint_server1 = &hint_server1;
  args.hint_server2 = &hint_server2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Mkdir()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Mkdir") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Mkdir_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::Mkdir_Presplit(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  send_Mkdir_Presplit(obj_id, perm, hint_server1, hint_server2);
  recv_Mkdir_Presplit();
}

void MetadataIndexServiceClient::send_Mkdir_Presplit(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Mkdir_Presplit", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mkdir_Presplit_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.hint_server1 = &hint_server1;
  args.hint_server2 = &hint_server2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Mkdir_Presplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Mkdir_Presplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Mkdir_Presplit_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

bool MetadataIndexServiceClient::Chmod(const OID& obj_id, const int16_t perm)
{
  send_Chmod(obj_id, perm);
  return recv_Chmod();
}

void MetadataIndexServiceClient::send_Chmod(const OID& obj_id, const int16_t perm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Chmod", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Chmod_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool MetadataIndexServiceClient::recv_Chmod()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Chmod") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  MetadataIndexService_Chmod_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.not_found) {
    throw result.not_found;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Chmod failed: unknown result");
}

bool MetadataIndexServiceClient::Chown(const OID& obj_id, const int16_t uid, const int16_t gid)
{
  send_Chown(obj_id, uid, gid);
  return recv_Chown();
}

void MetadataIndexServiceClient::send_Chown(const OID& obj_id, const int16_t uid, const int16_t gid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Chown", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Chown_pargs args;
  args.obj_id = &obj_id;
  args.uid = &uid;
  args.gid = &gid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool MetadataIndexServiceClient::recv_Chown()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Chown") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  MetadataIndexService_Chown_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.srv_redirect) {
    throw result.srv_redirect;
  }
  if (result.__isset.not_found) {
    throw result.not_found;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Chown failed: unknown result");
}

void MetadataIndexServiceClient::CreateZeroth(const int64_t dir_id, const int16_t zeroth_server)
{
  send_CreateZeroth(dir_id, zeroth_server);
  recv_CreateZeroth();
}

void MetadataIndexServiceClient::send_CreateZeroth(const int64_t dir_id, const int16_t zeroth_server)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("CreateZeroth", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_CreateZeroth_pargs args;
  args.dir_id = &dir_id;
  args.zeroth_server = &zeroth_server;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_CreateZeroth()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("CreateZeroth") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_CreateZeroth_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.wrong_srv) {
    throw result.wrong_srv;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::Readdir(EntryList& _return, const int64_t dir_id, const int16_t index)
{
  send_Readdir(dir_id, index);
  recv_Readdir(_return);
}

void MetadataIndexServiceClient::send_Readdir(const int64_t dir_id, const int16_t index)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Readdir", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Readdir_pargs args;
  args.dir_id = &dir_id;
  args.index = &index;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_Readdir(EntryList& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Readdir") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_Readdir_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Readdir failed: unknown result");
}

void MetadataIndexServiceClient::ReadBitmap(std::string& _return, const int64_t dir_id)
{
  send_ReadBitmap(dir_id);
  recv_ReadBitmap(_return);
}

void MetadataIndexServiceClient::send_ReadBitmap(const int64_t dir_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ReadBitmap", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_ReadBitmap_pargs args;
  args.dir_id = &dir_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_ReadBitmap(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ReadBitmap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_ReadBitmap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReadBitmap failed: unknown result");
}

void MetadataIndexServiceClient::UpdateBitmap(const int64_t dir_id, const std::string& dmap_data)
{
  send_UpdateBitmap(dir_id, dmap_data);
  recv_UpdateBitmap();
}

void MetadataIndexServiceClient::send_UpdateBitmap(const int64_t dir_id, const std::string& dmap_data)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("UpdateBitmap", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_UpdateBitmap_pargs args;
  args.dir_id = &dir_id;
  args.dmap_data = &dmap_data;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_UpdateBitmap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("UpdateBitmap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_UpdateBitmap_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.unknown_dir) {
    throw result.unknown_dir;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

void MetadataIndexServiceClient::InsertSplit(const int64_t dir_id, const int16_t parent_index, const int16_t child_index, const std::string& path_split_files, const std::string& dmap_data, const int64_t min_seq, const int64_t max_seq, const int64_t num_entries)
{
  send_InsertSplit(dir_id, parent_index, child_index, path_split_files, dmap_data, min_seq, max_seq, num_entries);
  recv_InsertSplit();
}

void MetadataIndexServiceClient::send_InsertSplit(const int64_t dir_id, const int16_t parent_index, const int16_t child_index, const std::string& path_split_files, const std::string& dmap_data, const int64_t min_seq, const int64_t max_seq, const int64_t num_entries)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("InsertSplit", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_InsertSplit_pargs args;
  args.dir_id = &dir_id;
  args.parent_index = &parent_index;
  args.child_index = &child_index;
  args.path_split_files = &path_split_files;
  args.dmap_data = &dmap_data;
  args.min_seq = &min_seq;
  args.max_seq = &max_seq;
  args.num_entries = &num_entries;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MetadataIndexServiceClient::recv_InsertSplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("InsertSplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MetadataIndexService_InsertSplit_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.wrong_srv) {
    throw result.wrong_srv;
  }
  if (result.__isset.file_exists) {
    throw result.file_exists;
  }
  if (result.__isset.io_error) {
    throw result.io_error;
  }
  if (result.__isset.srv_error) {
    throw result.srv_error;
  }
  return;
}

bool MetadataIndexServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void MetadataIndexServiceProcessor::process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Ping", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Ping");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Ping");
  }

  MetadataIndexService_Ping_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Ping", bytes);
  }

  MetadataIndexService_Ping_result result;
  try {
    iface_->Ping();
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Ping");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Ping", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Ping");
  }

  oprot->writeMessageBegin("Ping", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Ping", bytes);
  }
}

void MetadataIndexServiceProcessor::process_FlushDB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.FlushDB", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.FlushDB");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.FlushDB");
  }

  MetadataIndexService_FlushDB_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.FlushDB", bytes);
  }

  MetadataIndexService_FlushDB_result result;
  try {
    iface_->FlushDB();
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.FlushDB");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("FlushDB", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.FlushDB");
  }

  oprot->writeMessageBegin("FlushDB", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.FlushDB", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Access", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Access");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Access");
  }

  MetadataIndexService_Access_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Access", bytes);
  }

  MetadataIndexService_Access_result result;
  try {
    iface_->Access(result.success, args.obj_id);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileNotFoundException &not_found) {
    result.not_found = not_found;
    result.__isset.not_found = true;
  } catch (DirectoryExpectedError &not_a_dir) {
    result.not_a_dir = not_a_dir;
    result.__isset.not_a_dir = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Access");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Access", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Access");
  }

  oprot->writeMessageBegin("Access", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Access", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Renew(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Renew", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Renew");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Renew");
  }

  MetadataIndexService_Renew_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Renew", bytes);
  }

  MetadataIndexService_Renew_result result;
  try {
    iface_->Renew(result.success, args.obj_id);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileNotFoundException &not_found) {
    result.not_found = not_found;
    result.__isset.not_found = true;
  } catch (DirectoryExpectedError &not_a_dir) {
    result.not_a_dir = not_a_dir;
    result.__isset.not_a_dir = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Renew");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Renew", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Renew");
  }

  oprot->writeMessageBegin("Renew", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Renew", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Getattr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Getattr", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Getattr");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Getattr");
  }

  MetadataIndexService_Getattr_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Getattr", bytes);
  }

  MetadataIndexService_Getattr_result result;
  try {
    iface_->Getattr(result.success, args.obj_id);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileNotFoundException &not_found) {
    result.not_found = not_found;
    result.__isset.not_found = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Getattr");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Getattr", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Getattr");
  }

  oprot->writeMessageBegin("Getattr", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Getattr", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Mknod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Mknod", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Mknod");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Mknod");
  }

  MetadataIndexService_Mknod_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Mknod", bytes);
  }

  MetadataIndexService_Mknod_result result;
  try {
    iface_->Mknod(args.obj_id, args.perm);
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Mknod");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Mknod", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Mknod");
  }

  oprot->writeMessageBegin("Mknod", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Mknod", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Mknod_Bulk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Mknod_Bulk", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Mknod_Bulk");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Mknod_Bulk");
  }

  MetadataIndexService_Mknod_Bulk_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Mknod_Bulk", bytes);
  }

  MetadataIndexService_Mknod_Bulk_result result;
  try {
    iface_->Mknod_Bulk(args.obj_ids, args.perm);
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Mknod_Bulk");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Mknod_Bulk", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Mknod_Bulk");
  }

  oprot->writeMessageBegin("Mknod_Bulk", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Mknod_Bulk", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Mkdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Mkdir", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Mkdir");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Mkdir");
  }

  MetadataIndexService_Mkdir_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Mkdir", bytes);
  }

  MetadataIndexService_Mkdir_result result;
  try {
    iface_->Mkdir(args.obj_id, args.perm, args.hint_server1, args.hint_server2);
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Mkdir");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Mkdir", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Mkdir");
  }

  oprot->writeMessageBegin("Mkdir", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Mkdir", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Mkdir_Presplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Mkdir_Presplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Mkdir_Presplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Mkdir_Presplit");
  }

  MetadataIndexService_Mkdir_Presplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Mkdir_Presplit", bytes);
  }

  MetadataIndexService_Mkdir_Presplit_result result;
  try {
    iface_->Mkdir_Presplit(args.obj_id, args.perm, args.hint_server1, args.hint_server2);
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Mkdir_Presplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Mkdir_Presplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Mkdir_Presplit");
  }

  oprot->writeMessageBegin("Mkdir_Presplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Mkdir_Presplit", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Chmod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Chmod", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Chmod");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Chmod");
  }

  MetadataIndexService_Chmod_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Chmod", bytes);
  }

  MetadataIndexService_Chmod_result result;
  try {
    result.success = iface_->Chmod(args.obj_id, args.perm);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileNotFoundException &not_found) {
    result.not_found = not_found;
    result.__isset.not_found = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Chmod");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Chmod", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Chmod");
  }

  oprot->writeMessageBegin("Chmod", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Chmod", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Chown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Chown", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Chown");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Chown");
  }

  MetadataIndexService_Chown_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Chown", bytes);
  }

  MetadataIndexService_Chown_result result;
  try {
    result.success = iface_->Chown(args.obj_id, args.uid, args.gid);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (ServerRedirectionException &srv_redirect) {
    result.srv_redirect = srv_redirect;
    result.__isset.srv_redirect = true;
  } catch (FileNotFoundException &not_found) {
    result.not_found = not_found;
    result.__isset.not_found = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Chown");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Chown", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Chown");
  }

  oprot->writeMessageBegin("Chown", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Chown", bytes);
  }
}

void MetadataIndexServiceProcessor::process_CreateZeroth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.CreateZeroth", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.CreateZeroth");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.CreateZeroth");
  }

  MetadataIndexService_CreateZeroth_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.CreateZeroth", bytes);
  }

  MetadataIndexService_CreateZeroth_result result;
  try {
    iface_->CreateZeroth(args.dir_id, args.zeroth_server);
  } catch (WrongServerError &wrong_srv) {
    result.wrong_srv = wrong_srv;
    result.__isset.wrong_srv = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.CreateZeroth");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("CreateZeroth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.CreateZeroth");
  }

  oprot->writeMessageBegin("CreateZeroth", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.CreateZeroth", bytes);
  }
}

void MetadataIndexServiceProcessor::process_Readdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.Readdir", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.Readdir");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.Readdir");
  }

  MetadataIndexService_Readdir_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.Readdir", bytes);
  }

  MetadataIndexService_Readdir_result result;
  try {
    iface_->Readdir(result.success, args.dir_id, args.index);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.Readdir");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Readdir", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.Readdir");
  }

  oprot->writeMessageBegin("Readdir", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.Readdir", bytes);
  }
}

void MetadataIndexServiceProcessor::process_ReadBitmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.ReadBitmap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.ReadBitmap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.ReadBitmap");
  }

  MetadataIndexService_ReadBitmap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.ReadBitmap", bytes);
  }

  MetadataIndexService_ReadBitmap_result result;
  try {
    iface_->ReadBitmap(result.success, args.dir_id);
    result.__isset.success = true;
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.ReadBitmap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ReadBitmap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.ReadBitmap");
  }

  oprot->writeMessageBegin("ReadBitmap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.ReadBitmap", bytes);
  }
}

void MetadataIndexServiceProcessor::process_UpdateBitmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.UpdateBitmap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.UpdateBitmap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.UpdateBitmap");
  }

  MetadataIndexService_UpdateBitmap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.UpdateBitmap", bytes);
  }

  MetadataIndexService_UpdateBitmap_result result;
  try {
    iface_->UpdateBitmap(args.dir_id, args.dmap_data);
  } catch (UnrecognizedDirectoryError &unknown_dir) {
    result.unknown_dir = unknown_dir;
    result.__isset.unknown_dir = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.UpdateBitmap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("UpdateBitmap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.UpdateBitmap");
  }

  oprot->writeMessageBegin("UpdateBitmap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.UpdateBitmap", bytes);
  }
}

void MetadataIndexServiceProcessor::process_InsertSplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MetadataIndexService.InsertSplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MetadataIndexService.InsertSplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MetadataIndexService.InsertSplit");
  }

  MetadataIndexService_InsertSplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MetadataIndexService.InsertSplit", bytes);
  }

  MetadataIndexService_InsertSplit_result result;
  try {
    iface_->InsertSplit(args.dir_id, args.parent_index, args.child_index, args.path_split_files, args.dmap_data, args.min_seq, args.max_seq, args.num_entries);
  } catch (WrongServerError &wrong_srv) {
    result.wrong_srv = wrong_srv;
    result.__isset.wrong_srv = true;
  } catch (FileAlreadyExistsException &file_exists) {
    result.file_exists = file_exists;
    result.__isset.file_exists = true;
  } catch (IOError &io_error) {
    result.io_error = io_error;
    result.__isset.io_error = true;
  } catch (ServerInternalError &srv_error) {
    result.srv_error = srv_error;
    result.__isset.srv_error = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MetadataIndexService.InsertSplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("InsertSplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MetadataIndexService.InsertSplit");
  }

  oprot->writeMessageBegin("InsertSplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MetadataIndexService.InsertSplit", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > MetadataIndexServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< MetadataIndexServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< MetadataIndexServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new MetadataIndexServiceProcessor(handler));
  return processor;
}

void MetadataIndexServiceConcurrentClient::Ping()
{
  int32_t seqid = send_Ping();
  recv_Ping(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Ping()
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Ping", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Ping(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Ping") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Ping_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::FlushDB()
{
  int32_t seqid = send_FlushDB();
  recv_FlushDB(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_FlushDB()
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("FlushDB", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_FlushDB_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_FlushDB(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("FlushDB") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_FlushDB_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Access(LookupInfo& _return, const OID& obj_id)
{
  int32_t seqid = send_Access(obj_id);
  recv_Access(_return, seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Access(const OID& obj_id)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Access", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Access_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Access(LookupInfo& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Access") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Access_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.not_found) {
        sentry.commit();
        throw result.not_found;
      }
      if (result.__isset.not_a_dir) {
        sentry.commit();
        throw result.not_a_dir;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Access failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Renew(LookupInfo& _return, const OID& obj_id)
{
  int32_t seqid = send_Renew(obj_id);
  recv_Renew(_return, seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Renew(const OID& obj_id)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Renew", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Renew_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Renew(LookupInfo& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Renew") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Renew_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.not_found) {
        sentry.commit();
        throw result.not_found;
      }
      if (result.__isset.not_a_dir) {
        sentry.commit();
        throw result.not_a_dir;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Renew failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Getattr(StatInfo& _return, const OID& obj_id)
{
  int32_t seqid = send_Getattr(obj_id);
  recv_Getattr(_return, seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Getattr(const OID& obj_id)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Getattr", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Getattr_pargs args;
  args.obj_id = &obj_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Getattr(StatInfo& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Getattr") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Getattr_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.not_found) {
        sentry.commit();
        throw result.not_found;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Getattr failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Mknod(const OID& obj_id, const int16_t perm)
{
  int32_t seqid = send_Mknod(obj_id, perm);
  recv_Mknod(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Mknod(const OID& obj_id, const int16_t perm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Mknod", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mknod_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Mknod(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Mknod") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Mknod_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Mknod_Bulk(const OIDS& obj_ids, const int16_t perm)
{
  int32_t seqid = send_Mknod_Bulk(obj_ids, perm);
  recv_Mknod_Bulk(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Mknod_Bulk(const OIDS& obj_ids, const int16_t perm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Mknod_Bulk", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mknod_Bulk_pargs args;
  args.obj_ids = &obj_ids;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Mknod_Bulk(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Mknod_Bulk") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Mknod_Bulk_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Mkdir(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t seqid = send_Mkdir(obj_id, perm, hint_server1, hint_server2);
  recv_Mkdir(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Mkdir(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Mkdir", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mkdir_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.hint_server1 = &hint_server1;
  args.hint_server2 = &hint_server2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Mkdir(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Mkdir") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Mkdir_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Mkdir_Presplit(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t seqid = send_Mkdir_Presplit(obj_id, perm, hint_server1, hint_server2);
  recv_Mkdir_Presplit(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Mkdir_Presplit(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Mkdir_Presplit", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Mkdir_Presplit_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.hint_server1 = &hint_server1;
  args.hint_server2 = &hint_server2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Mkdir_Presplit(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Mkdir_Presplit") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Mkdir_Presplit_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

bool MetadataIndexServiceConcurrentClient::Chmod(const OID& obj_id, const int16_t perm)
{
  int32_t seqid = send_Chmod(obj_id, perm);
  return recv_Chmod(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Chmod(const OID& obj_id, const int16_t perm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Chmod", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Chmod_pargs args;
  args.obj_id = &obj_id;
  args.perm = &perm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

bool MetadataIndexServiceConcurrentClient::recv_Chmod(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Chmod") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      bool _return;
      MetadataIndexService_Chmod_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.not_found) {
        sentry.commit();
        throw result.not_found;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Chmod failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

bool MetadataIndexServiceConcurrentClient::Chown(const OID& obj_id, const int16_t uid, const int16_t gid)
{
  int32_t seqid = send_Chown(obj_id, uid, gid);
  return recv_Chown(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Chown(const OID& obj_id, const int16_t uid, const int16_t gid)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Chown", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Chown_pargs args;
  args.obj_id = &obj_id;
  args.uid = &uid;
  args.gid = &gid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

bool MetadataIndexServiceConcurrentClient::recv_Chown(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Chown") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      bool _return;
      MetadataIndexService_Chown_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.srv_redirect) {
        sentry.commit();
        throw result.srv_redirect;
      }
      if (result.__isset.not_found) {
        sentry.commit();
        throw result.not_found;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Chown failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::CreateZeroth(const int64_t dir_id, const int16_t zeroth_server)
{
  int32_t seqid = send_CreateZeroth(dir_id, zeroth_server);
  recv_CreateZeroth(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_CreateZeroth(const int64_t dir_id, const int16_t zeroth_server)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("CreateZeroth", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_CreateZeroth_pargs args;
  args.dir_id = &dir_id;
  args.zeroth_server = &zeroth_server;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_CreateZeroth(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("CreateZeroth") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_CreateZeroth_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.wrong_srv) {
        sentry.commit();
        throw result.wrong_srv;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::Readdir(EntryList& _return, const int64_t dir_id, const int16_t index)
{
  int32_t seqid = send_Readdir(dir_id, index);
  recv_Readdir(_return, seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_Readdir(const int64_t dir_id, const int16_t index)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("Readdir", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_Readdir_pargs args;
  args.dir_id = &dir_id;
  args.index = &index;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_Readdir(EntryList& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Readdir") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_Readdir_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "Readdir failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::ReadBitmap(std::string& _return, const int64_t dir_id)
{
  int32_t seqid = send_ReadBitmap(dir_id);
  recv_ReadBitmap(_return, seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_ReadBitmap(const int64_t dir_id)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ReadBitmap", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_ReadBitmap_pargs args;
  args.dir_id = &dir_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_ReadBitmap(std::string& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ReadBitmap") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_ReadBitmap_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReadBitmap failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::UpdateBitmap(const int64_t dir_id, const std::string& dmap_data)
{
  int32_t seqid = send_UpdateBitmap(dir_id, dmap_data);
  recv_UpdateBitmap(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_UpdateBitmap(const int64_t dir_id, const std::string& dmap_data)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("UpdateBitmap", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_UpdateBitmap_pargs args;
  args.dir_id = &dir_id;
  args.dmap_data = &dmap_data;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_UpdateBitmap(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("UpdateBitmap") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_UpdateBitmap_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.unknown_dir) {
        sentry.commit();
        throw result.unknown_dir;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void MetadataIndexServiceConcurrentClient::InsertSplit(const int64_t dir_id, const int16_t parent_index, const int16_t child_index, const std::string& path_split_files, const std::string& dmap_data, const int64_t min_seq, const int64_t max_seq, const int64_t num_entries)
{
  int32_t seqid = send_InsertSplit(dir_id, parent_index, child_index, path_split_files, dmap_data, min_seq, max_seq, num_entries);
  recv_InsertSplit(seqid);
}

int32_t MetadataIndexServiceConcurrentClient::send_InsertSplit(const int64_t dir_id, const int16_t parent_index, const int16_t child_index, const std::string& path_split_files, const std::string& dmap_data, const int64_t min_seq, const int64_t max_seq, const int64_t num_entries)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("InsertSplit", ::apache::thrift::protocol::T_CALL, cseqid);

  MetadataIndexService_InsertSplit_pargs args;
  args.dir_id = &dir_id;
  args.parent_index = &parent_index;
  args.child_index = &child_index;
  args.path_split_files = &path_split_files;
  args.dmap_data = &dmap_data;
  args.min_seq = &min_seq;
  args.max_seq = &max_seq;
  args.num_entries = &num_entries;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void MetadataIndexServiceConcurrentClient::recv_InsertSplit(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("InsertSplit") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      MetadataIndexService_InsertSplit_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.wrong_srv) {
        sentry.commit();
        throw result.wrong_srv;
      }
      if (result.__isset.file_exists) {
        sentry.commit();
        throw result.file_exists;
      }
      if (result.__isset.io_error) {
        sentry.commit();
        throw result.io_error;
      }
      if (result.__isset.srv_error) {
        sentry.commit();
        throw result.srv_error;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

} // namespace

