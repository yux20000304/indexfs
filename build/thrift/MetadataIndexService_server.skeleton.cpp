// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MetadataIndexService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::indexfs;

class MetadataIndexServiceHandler : virtual public MetadataIndexServiceIf {
 public:
  MetadataIndexServiceHandler() {
    // Your initialization goes here
  }

  void Ping() {
    // Your implementation goes here
    printf("Ping\n");
  }

  void FlushDB() {
    // Your implementation goes here
    printf("FlushDB\n");
  }

  void Access(LookupInfo& _return, const OID& obj_id) {
    // Your implementation goes here
    printf("Access\n");
  }

  void Renew(LookupInfo& _return, const OID& obj_id) {
    // Your implementation goes here
    printf("Renew\n");
  }

  void Getattr(StatInfo& _return, const OID& obj_id) {
    // Your implementation goes here
    printf("Getattr\n");
  }

  void Mknod(const OID& obj_id, const int16_t perm) {
    // Your implementation goes here
    printf("Mknod\n");
  }

  void Mknod_Bulk(const OIDS& obj_ids, const int16_t perm) {
    // Your implementation goes here
    printf("Mknod_Bulk\n");
  }

  void Mkdir(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2) {
    // Your implementation goes here
    printf("Mkdir\n");
  }

  void Mkdir_Presplit(const OID& obj_id, const int16_t perm, const int16_t hint_server1, const int16_t hint_server2) {
    // Your implementation goes here
    printf("Mkdir_Presplit\n");
  }

  bool Chmod(const OID& obj_id, const int16_t perm) {
    // Your implementation goes here
    printf("Chmod\n");
  }

  bool Chown(const OID& obj_id, const int16_t uid, const int16_t gid) {
    // Your implementation goes here
    printf("Chown\n");
  }

  void CreateZeroth(const int64_t dir_id, const int16_t zeroth_server) {
    // Your implementation goes here
    printf("CreateZeroth\n");
  }

  void Readdir(EntryList& _return, const int64_t dir_id, const int16_t index) {
    // Your implementation goes here
    printf("Readdir\n");
  }

  void ReadBitmap(std::string& _return, const int64_t dir_id) {
    // Your implementation goes here
    printf("ReadBitmap\n");
  }

  void UpdateBitmap(const int64_t dir_id, const std::string& dmap_data) {
    // Your implementation goes here
    printf("UpdateBitmap\n");
  }

  void InsertSplit(const int64_t dir_id, const int16_t parent_index, const int16_t child_index, const std::string& path_split_files, const std::string& dmap_data, const int64_t min_seq, const int64_t max_seq, const int64_t num_entries) {
    // Your implementation goes here
    printf("InsertSplit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MetadataIndexServiceHandler> handler(new MetadataIndexServiceHandler());
  shared_ptr<TProcessor> processor(new MetadataIndexServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

